---------------------------------------------
编译.proto文件的问题
---------------------------------------------
在test目录下，执行 protoc --go_out=. employee/*.proto account/*.proto 即可生成对应pb.go文件
注意如下几点：
1. 当前命令执行目录 加上 employee/*.proto account/*.proto 表示所需编译源文件
2. 当前命令执行目录 加上 --go_out=. 再加上 proto 文件中的 option go_package 构成 pb.go 文件生成位置
3. 当前命令执行目录 加上 proto 文件中的 import "employee/messages.proto"; 表示该文件所需import的文件
简单说，当前命令执行目录 作为上述各种目录的根目录
4. 所有proto文件都要有 option go_package
5. protoc -I 后面可以添加import路径

在goland 中需要安装 Protocol Buffer Editor 插件
并且在 设置中搜索 protocol buffer 页面 import path中添加 import 路径
比如这里添加的
Users/mac/work/goproject/study_proto/proto
这样在proto文件中 import 才能正常显示以及跳转


另一个例子
person dir - code dir   - person.proto
                        - simple.proto
                        - person dir

正确的执行方式如下
---
person.proto 中

syntax = "proto3";
package code;
option go_package = "code/person";
定义 message id / message person

---
simple.proto 中

syntax = "proto3";
package code;
option go_package = "code/person";

import "code/person.proto";

service Simple {
  rpc GetPerson(Ids) returns (Person) {};
}

---
编译命令为
在 person dir 下执行
protoc --proto_path=. --go_out=. --go-grpc_out=. code/*.proto
也就是说在目录x下定义了所有的proto，并且将所有pb文件也生成在x目录下，
此时应该在x目录的上一层执行命令。
当然相应的 option / import 这些都应该写为 x/...

如果不这样做，你会发现各种各样的奇葩问题。
另外需要注意 一个文件引用另一个文件中的定义，需要import 那个文件，即便两个文件在同一个目录下，就像上面那样。

直接将这种方式作为规则，能够防止遇到一些稀奇古怪的问题。


---------------------------------------------
引用包的问题
---------------------------------------------
每个包的引用都需要一个路径，路径的切口就是go.mod中的 module 名字
网络包 github.com/xxx/yyy 因为放到github上发布的包， go.mod 中的 module 名字 都是 github.com/xxx/yyy
本地上的本项目包 本module 打头的路径 如这里的 test2/pro/person
本地上的其他项目包 需要用到go.mod 中的 replace
	首先在 require 中添加 proto v0.0.0
	然后 replace proto => ../proto，这里的 ../proto 就是本地其他项目包的路径
    而包../proto 需要是一个 go mod init proto 的包，具有go.mod

replace 的作用
1. 指定使用本地包
replace proto => ../proto
2. 指定使用其他网络包
replace google/xxx => github.com/xxx
3. 指定本地包代替网络包
replace github.com/article => ../article
比如可能网络包没有本地包更新，因此先使用本地包，本地包上传之后，就可以删除replace，使用网络包了

参考： https://www.jianshu.com/p/760c97ff644c

当项目中需要引入网络包的时候，只需要在本项目的go.mod文件所在目录或子目录下执行 go get github.com/xxx/yyy
就会在机器上下载对应库，在go.mod中自动添加引入该库。
总之需要明白，go.mod 以及go mod工具是与 go get...诸多工具联动的。
执行这些命令的位置应该是在go.mod 所在目录或子目录，即项目下的目录即可。


---------------------------------------------
etcd 相关
---------------------------------------------
etcd 常用操作，基于etcdctlv3
etcdctl -h
etcdctl get -h

etcdctl put k v
etcdctl get k
etcdctl get --prefix xxx
etcdctl get --from-key xxx
etcdctl get --print-value-only k

etcdctl del k
etcdctl del --prefix xxx
etcdctl del --from-key xxx

etcdctl watch key
etcdctl watch key1 key9
etcdctl watch --prefix k

etcdctl watch -i
watch foo
watch zoo

etcdctl lease grant 60
etcdctl lease revoke 694d77f5dd93178b
etcdctl put --lease=694d77f5dd93178b t1 v1
etcdctl lease keep-alive 694d77f5dd93178b
etcdctl lease timetolive 694d77f5dd93178b
etcdctl lease timetolive --keys 694d77f5dd93178b

测试发现 keep-alive 会以租约周期的三分之一 来作为keep-alive的执行周期。
比如假设租约周期30s，keep-alive会每10s续约一次。

golang 中使用 go.etcd.io/etcd/client/v3，非github上的库



register 即服务端需要向etcd注册自己，并且周期刷新租约
resolver 即客户端需要从etcd拉取列表，并且监控服务端的变化，当发现变化，就需要调整连接
resolver中两件事情：记录所有node地址信息（用在哪里），发生变化时实时更新连接

dial




etcd 中记录的地址信息格式如下
key
etcd://domain/service/node
value
192.168.1.77:9999


---------------------------------------------
对于 grpc 中 resolver 相关逻辑的说明：
---------------------------------------------

简单说明：
grpc.Dial 中根据target找寻对应 resolver builder，调用build函数创建 resolver，同时开启监控流程。
监控流程中若是发生连接变化，则通过调用 resolver.ClientConn UpdateState 函数来通知底层，让其对连接作出调整。
这里监控就是通过etcd watch 功能来实现的。
所有的服务端node 都以lease 方式写入地址到 etcd 中。

详细说明：
grpc.Dial 会解析入参target，target形式为 scheme://authority/endpoint
寻找该 scheme 对应 builder.
将 builder 传入 newCCResolverWrapper，该函数中调用 build
这个build就是需要实现的。
调用build会传入 target , resolver.ClientConn，返回 resolver.Resolver,
这里返回的 resolver.Resolver 所指向的实体 ccResolverWrapper 中事实上包含了 grpc.ClientConn，即实际的grpc连接。

当连接发生变化的时候，会调用 resolver.ClientConn.UpdateState 函数，该函数中，就会对实际的 grpc.ClientConn 进行更新。
如下为 resolver.ClientConn 的注释
// ClientConn contains the callbacks for resolver to notify any updates to the gRPC ClientConn.
由此可见这个接口的目的就是当发现连接变化时用来通知变更 grpc.ClientConn，这个逻辑已经在底层实现，只需要调用 UpdateState。

因此，建立 resolver 的目的主要就是
a. 开启监控，监控服务端node的变化
b. 当监控发现变化时，调用 resolver.ClientConn 的UpdateState 函数，通知底层连接发生变更。



简单总结：
业务代码应该实现的部分：
建立resolver实例
a. resolver.Register 注册该 resolver 实例
b. 实现 resolver.Build 函数，将 resolver.ClientConn 保存下来
c. 在 resolver.Build 函数中开启监控流程，监控服务端node变化，当发生变化时，获取到最新的服务端node地址，然后
调用 resolver.ClientConn UpdateState 函数，通知底层服务端node发生变化

这里的 resolver 实例的一个例子就是 github.com/smartwalle/grpc4go/etcd@v0.0.2/register.go 中的Registry




---------------------------------------------
对于 grpc 中 Dial 的理解：
---------------------------------------------
实验方式：
look_etcd/server 中启动两个不同端口的server
因为这里在server.go中没有写注册地址到etcd的逻辑
因此需在etcd中手动写入地址即
testetcd://testes/testservice/testnode1  192.168.1.188:26667
testetcd://testes/testservice/testnode2  192.168.1.188:26668

启动 look_etcd/client
就会发现两个testnode依次接收到client请求


理解：
首先需要理解 grpc.Dial 的行为
假设有两个服务端节点
testetcd://testes/testservice/testnode1
testetcd://testes/testservice/testnode2


执行
cc, err := grpc.Dial("testetcd://testes/testservice/testnode1”,
	grpc.WithInsecure(),
	grpc.WithBlock(), grpc.WithTimeout(3*time.Second),
	grpc.WithDefaultServiceConfig(`{"loadBalancingPolicy":"round_robin"}`),
)
的时候，在底层只会建立一个连接，连接到testnode1 （lsof -i:26667）
即返回的cc
没有配置 grpc.WithDefaultServiceConfig 也是如此。



执行
cc, err := grpc.Dial("testetcd://testes/testservice",
	grpc.WithInsecure(),
	grpc.WithBlock(), grpc.WithTimeout(3*time.Second),
	grpc.WithDefaultServiceConfig(`{"loadBalancingPolicy":"round_robin"}`),
)
的时候，在底层会建立两个连接，分别连接到testnode1 和 testnode2。
返回的cc 并不是一个简单的连接，应该理解为包装了的一个上层连接抽象。

a. 此时调用函数，会发现调用的均衡性，第一次调用到testnode1，第二次调用到testnode2，如此轮询
若是没有上述 grpc.WithDefaultServiceConfig 配置，则不会出现这种均衡性，会只与一个testnode建立连接进行通信。
b. 当关闭testnode1，会发现客户端调用后续都会发往testnode2，不会出现报错，即在业务层面是不会感知到testnode1关闭的。
当关闭完所有的node，才会客户端报错。

cc 是一个上层连接抽象，事实上，在一个客户端中可以只使用一个 cc ，这个cc在底层与每个testnode都建立了一个连接，并且会根据均衡策略将每次请求（4类）分发到不同testnode中去。
简单说我一个客户端需要连接n个节点，只需要一个cc就够了，当然前提是定义了resolver逻辑。
若是怕一个cc不够用，或者发生阻塞之类的，可以考虑建立多个cc，形成一个pool。


另一种理解：
这里的 testetcd://testes/testservice 就是一个uri，这里grpc在底层实现的就是一个dns的类似功能。
cc就是代表了 该 uri 对应的所有node。
使用cc通信，底层会将请求分发到各个node 。





上述方式有一个特点，就是不知道下一次利用cc来调用服务函数，他到底会选择哪个节点提供node。
在room调用game的需求中，是需要知道选择了哪个game，然后通知客户端的。
因此在room中，采用手动方式来管理所有连接。
即
一个room针对每个game建立一个连接（grpc.Dial中第一个参数是直接指向一个node的），
之后将所有连接管理起来。
每次需要create room 的时候，会选择一个连接进行调用服务。
他在watcher中需要的就是当连接发生变化的时候，更新他的连接管理数据。