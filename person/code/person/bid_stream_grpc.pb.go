// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package person

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BidStreamClient is the client API for BidStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidStreamClient interface {
	GetPersonBidStream(ctx context.Context, opts ...grpc.CallOption) (BidStream_GetPersonBidStreamClient, error)
}

type bidStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewBidStreamClient(cc grpc.ClientConnInterface) BidStreamClient {
	return &bidStreamClient{cc}
}

func (c *bidStreamClient) GetPersonBidStream(ctx context.Context, opts ...grpc.CallOption) (BidStream_GetPersonBidStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &BidStream_ServiceDesc.Streams[0], "/code.BidStream/GetPersonBidStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &bidStreamGetPersonBidStreamClient{stream}
	return x, nil
}

type BidStream_GetPersonBidStreamClient interface {
	Send(*Ids) error
	Recv() (*Person, error)
	grpc.ClientStream
}

type bidStreamGetPersonBidStreamClient struct {
	grpc.ClientStream
}

func (x *bidStreamGetPersonBidStreamClient) Send(m *Ids) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bidStreamGetPersonBidStreamClient) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BidStreamServer is the server API for BidStream service.
// All implementations must embed UnimplementedBidStreamServer
// for forward compatibility
type BidStreamServer interface {
	GetPersonBidStream(BidStream_GetPersonBidStreamServer) error
	mustEmbedUnimplementedBidStreamServer()
}

// UnimplementedBidStreamServer must be embedded to have forward compatible implementations.
type UnimplementedBidStreamServer struct {
}

func (UnimplementedBidStreamServer) GetPersonBidStream(BidStream_GetPersonBidStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPersonBidStream not implemented")
}
func (UnimplementedBidStreamServer) mustEmbedUnimplementedBidStreamServer() {}

// UnsafeBidStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidStreamServer will
// result in compilation errors.
type UnsafeBidStreamServer interface {
	mustEmbedUnimplementedBidStreamServer()
}

func RegisterBidStreamServer(s grpc.ServiceRegistrar, srv BidStreamServer) {
	s.RegisterService(&BidStream_ServiceDesc, srv)
}

func _BidStream_GetPersonBidStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BidStreamServer).GetPersonBidStream(&bidStreamGetPersonBidStreamServer{stream})
}

type BidStream_GetPersonBidStreamServer interface {
	Send(*Person) error
	Recv() (*Ids, error)
	grpc.ServerStream
}

type bidStreamGetPersonBidStreamServer struct {
	grpc.ServerStream
}

func (x *bidStreamGetPersonBidStreamServer) Send(m *Person) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bidStreamGetPersonBidStreamServer) Recv() (*Ids, error) {
	m := new(Ids)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BidStream_ServiceDesc is the grpc.ServiceDesc for BidStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BidStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "code.BidStream",
	HandlerType: (*BidStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPersonBidStream",
			Handler:       _BidStream_GetPersonBidStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "code/bid_stream.proto",
}
