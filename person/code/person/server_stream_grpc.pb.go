// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package person

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerStreamClient is the client API for ServerStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerStreamClient interface {
	GetPersonServerStream(ctx context.Context, in *Ids, opts ...grpc.CallOption) (ServerStream_GetPersonServerStreamClient, error)
}

type serverStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewServerStreamClient(cc grpc.ClientConnInterface) ServerStreamClient {
	return &serverStreamClient{cc}
}

func (c *serverStreamClient) GetPersonServerStream(ctx context.Context, in *Ids, opts ...grpc.CallOption) (ServerStream_GetPersonServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServerStream_ServiceDesc.Streams[0], "/code.ServerStream/GetPersonServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStreamGetPersonServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerStream_GetPersonServerStreamClient interface {
	Recv() (*Person, error)
	grpc.ClientStream
}

type serverStreamGetPersonServerStreamClient struct {
	grpc.ClientStream
}

func (x *serverStreamGetPersonServerStreamClient) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerStreamServer is the server API for ServerStream service.
// All implementations must embed UnimplementedServerStreamServer
// for forward compatibility
type ServerStreamServer interface {
	GetPersonServerStream(*Ids, ServerStream_GetPersonServerStreamServer) error
	mustEmbedUnimplementedServerStreamServer()
}

// UnimplementedServerStreamServer must be embedded to have forward compatible implementations.
type UnimplementedServerStreamServer struct {
}

func (UnimplementedServerStreamServer) GetPersonServerStream(*Ids, ServerStream_GetPersonServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPersonServerStream not implemented")
}
func (UnimplementedServerStreamServer) mustEmbedUnimplementedServerStreamServer() {}

// UnsafeServerStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerStreamServer will
// result in compilation errors.
type UnsafeServerStreamServer interface {
	mustEmbedUnimplementedServerStreamServer()
}

func RegisterServerStreamServer(s grpc.ServiceRegistrar, srv ServerStreamServer) {
	s.RegisterService(&ServerStream_ServiceDesc, srv)
}

func _ServerStream_GetPersonServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Ids)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerStreamServer).GetPersonServerStream(m, &serverStreamGetPersonServerStreamServer{stream})
}

type ServerStream_GetPersonServerStreamServer interface {
	Send(*Person) error
	grpc.ServerStream
}

type serverStreamGetPersonServerStreamServer struct {
	grpc.ServerStream
}

func (x *serverStreamGetPersonServerStreamServer) Send(m *Person) error {
	return x.ServerStream.SendMsg(m)
}

// ServerStream_ServiceDesc is the grpc.ServiceDesc for ServerStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "code.ServerStream",
	HandlerType: (*ServerStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPersonServerStream",
			Handler:       _ServerStream_GetPersonServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "code/server_stream.proto",
}
